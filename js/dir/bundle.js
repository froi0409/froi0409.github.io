(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Print = void 0;
//Clase que nos permite manejar la instruccion Print
class Print {
    constructor(impresion, endl) {
        this.impresion = impresion;
        this.endl = endl;
        console.log('Valor a Imprimir: ' + this.impresion);
    }
    //Ejecuta la instrucción de impresión
    ejecutar(tabla, listadoErrores, ast) {
        const consola = document.getElementById('consola'); //Obtenemos el textarea que se está usando como salida
        consola.value += this.impresion; //Agregamos a la salida el texto que se desea imprimir
        if (this.endl) { //Si se usó println, imprime un salto de linea
            consola.value += '\n';
        }
    }
    //Traduce a código 3D
    traducir(tabla, ast) {
        throw new Error("Method not implemented.");
    }
}
exports.Print = Print;

},{}],2:[function(require,module,exports){
"use strict";
const ParserGenerado = require('./gramatica/gramatica.js');
window.parseo = function () {
    const entrada = document.getElementById('entrada');
    const consola = document.getElementById('consola');
    let entradaTexto = entrada.value;
    consola.value = 'Salida: \n';
    ParserGenerado.parse(entradaTexto);
};

},{"./gramatica/gramatica.js":3}],3:[function(require,module,exports){
(function (process){(function (){
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,12,24,25,91,92,93,94,95,96],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,28],$V8=[1,30],$V9=[1,32],$Va=[18,24],$Vb=[2,96],$Vc=[1,34],$Vd=[18,24,76,89],$Ve=[1,37],$Vf=[8,22],$Vg=[2,91],$Vh=[2,123],$Vi=[1,39],$Vj=[1,52],$Vk=[1,64],$Vl=[1,54],$Vm=[1,63],$Vn=[1,55],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,41],$Vy=[1,51],$Vz=[1,42],$VA=[1,43],$VB=[1,44],$VC=[1,45],$VD=[1,46],$VE=[1,47],$VF=[1,75],$VG=[1,77],$VH=[8,21],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,94],$VU=[1,95],$VV=[1,96],$VW=[1,97],$VX=[1,98],$VY=[8,21,22,62,90,121,122,124,125,126,127,128,129,130,131,132,133,134,141,142,143],$VZ=[2,106],$V_=[1,109],$V$=[1,108],$V01=[2,118],$V11=[1,113],$V21=[8,21,22,24,26,45,46,51,56,62,66,67,68,74,75,80,85,86,89,90,91,92,93,94,95,96,100,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,141,142,143],$V31=[2,113],$V41=[1,115],$V51=[1,116],$V61=[1,136],$V71=[1,149],$V81=[1,138],$V91=[1,139],$Va1=[1,140],$Vb1=[1,141],$Vc1=[1,145],$Vd1=[1,146],$Ve1=[1,148],$Vf1=[1,151],$Vg1=[1,153],$Vh1=[21,22,28],$Vi1=[1,180],$Vj1=[1,181],$Vk1=[1,183],$Vl1=[1,184],$Vm1=[1,185],$Vn1=[1,186],$Vo1=[1,187],$Vp1=[1,189],$Vq1=[21,22,90],$Vr1=[24,28,45,51,56,60,65,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],$Vs1=[85,86],$Vt1=[24,28,45,46,51,54,55,56,60,65,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],$Vu1=[1,207],$Vv1=[1,210],$Vw1=[1,212],$Vx1=[1,215],$Vy1=[1,216],$Vz1=[8,21,22,62,90,121,122,124,125,126,127,128,129,143],$VA1=[8,21,22,62,90,121,122,128,129,143],$VB1=[8,21,22,62,90,121,122,124,125,126,127,128,129,130,131,143],$VC1=[8,21,22,62,90,121,122,124,125,126,127,128,129,130,131,132,133,134,143],$VD1=[21,62,90],$VE1=[1,267],$VF1=[24,28,45,46,51,56,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],$VG1=[28,60,65],$VH1=[28,45,60,65],$VI1=[2,66],$VJ1=[2,64],$VK1=[1,329];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones_globales_block":4,"EOF":5,"instrucciones_globales_unit":6,"instrucciones_variables_declaracion":7,"PUNTO_COMA":8,"instrucciones_variables_asignacion":9,"instrucciones_funciones_declaracion":10,"declarar_struct":11,"VOID":12,"instrucciones_funciones_declaracion_nombre_funciones":13,"instrucciones_funciones_declaracion_parametros":14,"instrucciones_block_funcion":15,"tipo_datos_generales":16,"nombres_variables_unidad":17,"MAIN":18,"PAREN_INICIO":19,"instrucciones_funciones_declaracion_parametros_bloque":20,"PAREN_FIN":21,"COMA":22,"instrucciones_funciones_declaracion_parametros_unidad":23,"IDENTIFICADOR":24,"STRUCT":25,"LLAVE_INICIO":26,"declarar_struct_variables":27,"LLAVE_FIN":28,"instrucciones_unidad_varios":29,"instrucciones_block":30,"instrucciones_unidad":31,"instrucciones_funciones_llamada":32,"instrucciones_sentencia_control_ifs":33,"instrucciones_sentencia_control_switch":34,"instrucciones_loops_while":35,"instrucciones_loops_do_while":36,"instrucciones_loops_for":37,"instrucciones_variables_asignacion_in_de_crement":38,"instrucciones_print":39,"instrucciones_arreglos_push_pop":40,"instrucciones_return":41,"instrucciones_block_loops":42,"instrucciones_unidad_varios_loops":43,"instrucciones_unidad_loops":44,"BREAK":45,"CONTINUE":46,"instrucciones_print_valores":47,"instrucciones_sentencia_control_ifs_if":48,"instrucciones_sentencia_control_ifs_else_if_block":49,"instrucciones_sentencia_control_ifs_else":50,"IF":51,"condicion":52,"instrucciones_sentencia_control_ifs_else_if":53,"ELSE_IF":54,"ELSE":55,"SWITCH":56,"instrucciones_sentencia_control_switch_cuerpo":57,"instrucciones_sentencia_control_switch_cuerpo_case_varios":58,"instrucciones_sentencia_control_switch_cuerpo_case":59,"CASE":60,"valores_datos_primarios":61,"DOS_PUNTOS":62,"instrucciones_sentencia_control_switch_cuerpo_case_instrucciones":63,"instrucciones_sentencia_control_switch_cuerpo_case_break":64,"DEFAULT":65,"WHILE":66,"DO":67,"FOR":68,"operacion_general":69,"instrucciones_for":70,"instrucciones_loops_for_each":71,"IN":72,"valores_datos":73,"PRINT":74,"PRINTLN":75,"PUNTO":76,"POP":77,"arreglos_valores_posiciones":78,"PUSH":79,"RETURN":80,"instrucciones_variables_declaracion_conjunto":81,"instrucciones_variables_declaracion_simple":82,"instrucciones_variables_declaracion_simple_asignacion_opcional":83,"IGUAL":84,"INCREMENTO":85,"DECREMENTO":86,"tipo_datos_arreglo":87,"tipo_datos_primarios":88,"CORCH_INICIO":89,"CORCH_FIN":90,"INT":91,"DOUBLE":92,"BOOLEAN":93,"CHAR":94,"STRING":95,"FLOAT":96,"valores_datos_arreglos":97,"GATO":98,"funciones_con_valor_string":99,"STRING_VALUE":100,"funciones_con_valor_parsing":101,"ENTERO_VALUE":102,"DECIMAL_VALUE":103,"BOOLEAN_VALUE":104,"CHAR_VALUE":105,"NULL":106,"BEGIN":107,"END":108,"CARACTEROFPOSITION":109,"SUBSTRING":110,"LENGTH":111,"TOUPPERCASE":112,"TOLOWERCASE":113,"PARSE":114,"funciones_con_valor_parsing_tipo_parseo":115,"funciones_con_valor_parsing_tipo_datos":116,"TOINT":117,"TODOUBLE":118,"STRING_PARSE":119,"TYPEOF":120,"AND":121,"OR":122,"NOT":123,"MAYOR":124,"MENOR":125,"MAYOR_IGUAL":126,"MENOR_IGUAL":127,"DIFERENTE_IGUAL":128,"IGUAL_IGUAL":129,"SIGNO_MAS":130,"SIGNO_MIN":131,"SIGNO_POR":132,"SIGNO_DIV":133,"MOD":134,"POW":135,"SQRT":136,"LOG10":137,"SIN":138,"COS":139,"TAN":140,"CONCAT_AND":141,"CONCAT_POW":142,"SIGNO_INTERROGACION_CIERRE":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_COMA",12:"VOID",18:"MAIN",19:"PAREN_INICIO",21:"PAREN_FIN",22:"COMA",24:"IDENTIFICADOR",25:"STRUCT",26:"LLAVE_INICIO",28:"LLAVE_FIN",45:"BREAK",46:"CONTINUE",51:"IF",54:"ELSE_IF",55:"ELSE",56:"SWITCH",60:"CASE",62:"DOS_PUNTOS",65:"DEFAULT",66:"WHILE",67:"DO",68:"FOR",72:"IN",74:"PRINT",75:"PRINTLN",76:"PUNTO",77:"POP",79:"PUSH",80:"RETURN",84:"IGUAL",85:"INCREMENTO",86:"DECREMENTO",89:"CORCH_INICIO",90:"CORCH_FIN",91:"INT",92:"DOUBLE",93:"BOOLEAN",94:"CHAR",95:"STRING",96:"FLOAT",98:"GATO",100:"STRING_VALUE",102:"ENTERO_VALUE",103:"DECIMAL_VALUE",104:"BOOLEAN_VALUE",105:"CHAR_VALUE",106:"NULL",107:"BEGIN",108:"END",109:"CARACTEROFPOSITION",110:"SUBSTRING",111:"LENGTH",112:"TOUPPERCASE",113:"TOLOWERCASE",114:"PARSE",117:"TOINT",118:"TODOUBLE",119:"STRING_PARSE",120:"TYPEOF",121:"AND",122:"OR",123:"NOT",124:"MAYOR",125:"MENOR",126:"MAYOR_IGUAL",127:"MENOR_IGUAL",128:"DIFERENTE_IGUAL",129:"IGUAL_IGUAL",130:"SIGNO_MAS",131:"SIGNO_MIN",132:"SIGNO_POR",133:"SIGNO_DIV",134:"MOD",135:"POW",136:"SQRT",137:"LOG10",138:"SIN",139:"COS",140:"TAN",141:"CONCAT_AND",142:"CONCAT_POW",143:"SIGNO_INTERROGACION_CIERRE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,2],[6,1],[6,2],[10,4],[10,4],[13,1],[13,1],[14,3],[14,2],[20,3],[20,1],[23,2],[11,5],[27,1],[27,0],[15,3],[15,2],[30,3],[30,2],[30,1],[29,2],[29,1],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[42,3],[42,2],[42,1],[43,2],[43,1],[44,1],[44,2],[44,2],[32,4],[32,3],[33,3],[48,3],[49,2],[49,1],[49,0],[53,3],[50,2],[50,0],[34,5],[57,3],[58,2],[58,0],[59,5],[59,4],[64,2],[64,0],[63,1],[63,0],[35,3],[36,5],[37,9],[37,1],[70,1],[70,1],[70,1],[71,5],[39,4],[39,3],[39,4],[39,3],[47,3],[47,1],[40,6],[40,6],[41,2],[41,1],[52,3],[7,2],[81,3],[81,1],[82,2],[83,2],[83,0],[9,3],[38,2],[38,2],[16,1],[16,1],[87,3],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[97,2],[97,2],[73,1],[73,4],[73,6],[73,3],[73,3],[73,3],[73,1],[73,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[78,1],[78,1],[78,1],[17,1],[99,4],[99,6],[99,3],[99,3],[99,3],[101,6],[101,4],[116,1],[116,1],[116,1],[115,1],[115,1],[115,1],[115,1],[69,3],[69,3],[69,2],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,3],[69,3],[69,5],[69,1],[69,1],[69,1],[69,2],[69,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
/*return reversaArreglo($$[$0-1]);*/
break;
case 8: case 9:
 console.log('Funcion tipo: ' + $$[$0-3] + ' nombre: ' + $$[$0-2]); 
break;
case 10: case 11: case 95: case 96: case 98: case 99: case 100: case 101: case 102: case 103: case 121: case 122: case 123: case 131: case 132: case 133: case 134: case 135: case 136: case 137:
 this.$ = $$[$0]; 
break;
case 12:
 console.log('Funcion con parametros'); 
break;
case 13:
 console.log('Funcion sin parametros'); 
break;
case 14:
 console.log(', Dato: ' + $$[$0]); 
break;
case 15:
 console.log('Dato: ' + $$[$0]); 
break;
case 16:
 this.$ = ' ' + $$[$0] + ' : ' + $$[$0-1] ; 
break;
case 17:
 console.log('Struct con nombre: ' + $$[$0-3]); 
break;
case 19:
 console.log('Sin datos'); 
break;
case 20: case 22:
 console.log('Bloque de instrucciones con muchos datos: '); 
break;
case 21: case 23:
 console.log('Bloque de instrucciones sin datos: '); 
break;
case 24:
 console.log('Bloque de instrucciones con una sola instruccion: '); 
break;
case 27:
 console.log('Se efectuo llamada de funcion: '); 
break;
case 28:
 console.log('Se efectuo llamada de IF: '); 
break;
case 29:
 console.log('Se efectuo llamada de SWITCH: '); 
break;
case 30:
 console.log('Se efectuo llamada de WHILE: '); 
break;
case 31:
 console.log('Se efectuo llamada de DO WHILE: '); 
break;
case 32:
 console.log('Se efectuo llamada de FOR: '); 
break;
case 33:
 console.log('Se efectuo llamada de declaracion: '); 
break;
case 34:
 console.log('Se efectuo llamada de asignacion de valores: '); 
break;
case 35:
 console.log('Se efectuo llamada de asignacion de incremento/decremento: '); 
break;
case 36:
 console.log('Se efectuo llamada de print: '); 
break;
case 37:
 console.log('Se efectuo llamada de pop o push: '); 
break;
case 38:
 console.log('Se einstrucciones_arreglos_push_popinstrucciones_arreglos_push_popinstrucciones_arreglos_push_popfectuo llamada de return: '); 
break;
case 39:
 console.log('Se efectuo llamada de bloques para LOOPS: '); 
break;
case 40:
 console.log('Se efectuo llamada de bloques sin instrucciones para LOOPS: '); 
break;
case 41:
 console.log('Se efectuo llamada de bloques con una sola instruccion para LOOPS: '); 
break;
case 45:
 console.log('Se efectuo llamada de BREAK LOOPS: '); 
break;
case 46:
 console.log('Se efectuo llamada de CONTINUE LOOPS: '); 
break;
case 47:
 console.log('Se efectua llamada a la funcion con nombre: ' + $$[$0-3] + ' y tiene los parametros ya mostrados'); 
break;
case 48:
 console.log('Se efectua llamada a la funcion con nombre: ' + $$[$0-2] + ' y NO TIENE PARAMETROS'); 
break;
case 50:
 console.log('Se efectua IF'); 
break;
case 54:
 console.log('Se efectua else if'); 
break;
case 55:
 console.log('Se efectua else'); 
break;
case 57:
 console.log('Switch para: ' + $$[$0-2]); 
break;
case 61:
 console.log('Se efectua CASE'); 
break;
case 62:
 console.log('Se efectua DEFAULT'); 
break;
case 63:
 console.log('Se efectua BREAK SWITCH'); 
break;
case 64:
 console.log('Se efectua SIN BREAK'); 
break;
case 74:
 console.log('Se ejecuta for Each'); 
break;
case 75:
 console.log('Print con valores.'); 
          this.$ = new Print($$[$0-1], false);
        
break;
case 76: case 78:
 console.log('Print vacio'); 
break;
case 77:
 console.log('Println con valores'); 
break;
case 79:
 console.log(', ValorOpG'); 
break;
case 80:
 console.log('ValorOpG'); 
          this.$ = $$[$0]; //Retorna el valor obtenido en la operacion general
        
break;
case 81:
 console.log('Se ejecuta un pop'); 
break;
case 82:
 console.log('Se ejecuta un push'); 
break;
case 83:
 console.log('Se ejecuta un RETURN con valor'); 
break;
case 84:
 console.log('Se ejecuta un RETURN '); 
break;
case 85:
 console.log('Se efectua una condicion'); 
break;
case 86:
 console.log('Se declaran variables del tipo: ' + $$[$0-1] + ' , var de arriba'); 
break;
case 89:
 console.log('NombreVar: ' + $$[$0-1]); 
break;
case 90:
 console.log('NombreVar: ' + $$[$0-1] + '=Valor'); 
break;
case 92:
 console.log('NombreVar: ' + $$[$0-2] + '=Valor'); 
break;
case 93:
 console.log('accion de INCREMENTO'); 
break;
case 94:
 console.log('accion de DECREMENTO'); 
break;
case 97:
 this.$ = $$[$0-2] + '[]'; 
break;
case 104:
 console.log('CopiarArreglos con #' + $$[$0]); 
break;
case 105:
 console.log('Efectuar acciones con' + $$[$0-1] + '#'); 
break;
case 106:
 console.log('Datos, nombre de variable simple: ' + $$[$0]); 
break;
case 107:
 console.log('Datos ArrayEnLaPos, var[' + $$[$0-1] + '] '); 
break;
case 108:
 console.log('Datos ArrayEnRango, var[' + $$[$0-3] + ':' + $$[$0-1] + '] '); 
break;
case 109:
 console.log('Datos Array de datos de los mencionados, var[' + '....., los que aparecen arriba] '); 
break;
case 110:
 console.log('Datos variablesString.' + $$[$0]); 
break;
case 111:
 console.log('Datos String.' + $$[$0]); 
break;
case 112:
 console.log('Datos funcion parsing : ' + $$[$0]); 
break;
case 114: case 115: case 116: case 117: case 118: case 119:
 this.$ = $$[$0] 
break;
case 120:
 this.$ = 'OperacionGeneral'; 
break;
case 124:
 this.$ = $$[$0-3]+ '(valor)'; 
break;
case 125:
 this.$ = $$[$0-5] + '(valor, valor2)'; 
break;
case 126: case 127: case 128:
 this.$ = $$[$0-2] + '()'; 
break;
case 129:
 this.$ = $$[$0-5] + '.parse(valor)'; 
break;
case 130:
 this.$ = $$[$0-3] + '(valor)'; 
break;
case 138:
 console.log('Se efectua AND'); 
break;
case 139:
 console.log('Se efectua OR'); 
break;
case 140:
 console.log('Se efectua NOT'); 
break;
case 141:
 console.log('Se efectua MAYOR'); 
break;
case 142:
 console.log('Se efectua MENOR'); 
break;
case 143:
 console.log('Se efectua MAYOR_IGUAL'); 
break;
case 144:
 console.log('Se efectua MENOR_IGUAL'); 
break;
case 145:
 console.log('Se efectua DIFERENTE_IGUAL'); 
break;
case 146:
 console.log('Se efectua IGUAL_IGUAL'); 
break;
case 147:
 console.log('Se efectua SIGNO_MAS'); 
break;
case 148:
 console.log('Se efectua SIGNO_MIN'); 
break;
case 149:
 console.log('Se efectua SIGNO_POR'); 
break;
case 150:
 console.log('Se efectua SIGNO_DIV'); 
break;
case 151:
 console.log('Se efectua MOD'); 
break;
case 152:
 console.log('Se efectua POW'); 
break;
case 153:
 console.log('Se efectua SQRT'); 
break;
case 154:
 console.log('Se efectua LOG10'); 
break;
case 155:
 console.log('Se efectua SIN'); 
break;
case 156:
 console.log('Se efectua COS'); 
break;
case 157:
 console.log('Se efectua TAN'); 
break;
case 158:
 console.log('Se efectua CONCAT_AND'); 
break;
case 159:
 console.log('Se efectua CONCAT_POW'); 
break;
case 160:
 console.log('Se efectua OPERACION TERNARIO'); 
break;
case 161:
 console.log('Se efectua valores_datos'); 
break;
case 162:
 console.log('Se efectua valores_primarios'); 
        this.$ = $$[$0]; //Retorna el valor obtenido
      
break;
case 163:
 console.log('Se efectua valores_datos_arreglos'); 
break;
case 164:
 console.log('Se efectua SIGNO_MENOS UMINUS'); 
break;
case 165:
 console.log('Se efectua AGRUPACION POR ()'); 
break;
}
},
table: [o($V0,[2,3],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,9:6,10:7,11:8,12:[1,11],16:9,24:[1,10],25:[1,12],87:13,88:14,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6},{1:[2,1]},o($V0,[2,2]),{8:[1,21]},{8:[1,22]},o($V0,[2,6]),{8:[1,23]},{13:25,17:27,18:$V7,24:[1,29],81:24,82:26},{84:$V8},{13:31,17:27,18:$V7,24:$V9},{24:[1,33]},o($Va,[2,95]),o($Va,$Vb,{89:$Vc}),o($Vd,[2,98]),o($Vd,[2,99]),o($Vd,[2,100]),o($Vd,[2,101]),o($Vd,[2,102]),o($Vd,[2,103]),o($V0,[2,4]),o($V0,[2,5]),o($V0,[2,7]),{8:[2,86],22:[1,35]},{14:36,19:$Ve},o($Vf,[2,88]),{19:[2,10]},{19:[2,11]},o($Vf,$Vg,{83:38,19:$Vh,84:$Vi}),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:40,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{14:71,19:$Ve},o([8,19,21,22,62,72,90,121,122,124,125,126,127,128,129,130,131,132,133,134,141,142,143],$Vh),{26:[1,72]},{90:[1,73]},{24:$VF,82:74},{15:76,26:$VG},{16:81,20:78,21:[1,79],23:80,87:13,88:14,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6},o($Vf,[2,89]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:82,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VH,[2,92],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:99,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{19:[1,100]},{19:[1,101]},{19:[1,102]},{19:[1,103]},{19:[1,104]},{19:[1,105]},o($VY,[2,161]),o($VY,[2,162]),o($VY,[2,163]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:106,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:107,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VY,$VZ,{76:$V_,89:$V$,98:[1,110]}),{17:53,19:$Vj,24:$Vk,32:57,47:111,61:49,69:112,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VY,$V01,{76:$V11}),o($V21,[2,112]),o($V21,$V31),o($VY,[2,114]),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),o($VY,[2,119]),{17:114,24:$V9},o([8,21,22,24,26,45,46,51,56,62,66,67,68,74,75,76,80,89,90,91,92,93,94,95,96,98,100,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,141,142,143],$Vh,{19:$V41}),{76:$V51},{19:[1,117]},{19:[2,134]},{19:[2,135]},{19:[2,136]},{19:[2,137]},{15:118,26:$VG},{16:81,20:120,23:80,27:119,28:[2,19],87:13,88:14,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6},o($Va,[2,97]),o($Vf,[2,87]),o($Vf,$Vg,{83:38,84:$Vi}),o($V0,[2,9]),{7:130,9:131,16:143,17:147,24:$V61,28:[1,122],29:121,31:123,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{21:[1,152],22:$Vg1},{26:[2,13]},o($Vh1,[2,15]),{24:[1,154]},o($Vf,[2,90],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:155,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:156,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:157,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:158,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:159,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:160,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:161,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:162,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:163,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:164,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:165,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:166,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:167,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:168,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:169,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:170,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VY,[2,140]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:171,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:172,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:173,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:174,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:175,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:176,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VY,[2,164]),{21:[1,177],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:179,73:48,78:178,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vi1,108:$Vj1,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{99:182,109:$Vk1,110:$Vl1,111:$Vm1,112:$Vn1,113:$Vo1},o($VY,[2,105]),{22:$Vp1,90:[1,188]},o($Vq1,[2,80],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),{99:190,109:$Vk1,110:$Vl1,111:$Vm1,112:$Vn1,113:$Vo1},o($VY,[2,104]),{17:53,19:$Vj,21:[1,192],24:$Vk,32:57,47:191,61:49,69:112,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{114:[1,193]},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:194,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($V0,[2,8]),{28:[1,195]},{22:$Vg1,28:[2,18]},{7:130,9:131,16:143,17:147,24:$V61,28:[1,196],31:197,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($V0,[2,21]),o($Vr1,[2,26]),o($Vs1,$V31,{8:[1,198]}),o($Vt1,[2,28]),o($Vt1,[2,29]),o($Vt1,[2,30]),o($Vt1,[2,31]),o($Vt1,[2,32]),{8:[1,199]},{8:[1,200]},{8:[1,201]},{8:[1,202]},{8:[1,203]},{8:[1,204]},o([76,85,86,89],$Vh,{19:$V41,84:$V8}),o([24,28,45,46,51,55,56,60,65,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],[2,53],{49:205,53:206,54:$Vu1}),{19:[1,208]},{19:$Vv1,52:209},{7:130,9:131,16:143,17:147,24:$V61,26:$Vw1,31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,42:211,44:213,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{17:218,19:[1,217],24:$V9},o($Vt1,[2,70]),{24:$VF,81:24,82:26},{85:[1,219],86:[1,220]},{19:[1,221]},{19:[1,222]},o($Vs1,$VZ,{76:[1,223],89:$V$}),{8:[2,84],17:53,19:$Vj,24:$Vk,32:57,61:49,69:224,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{19:$Vv1,52:225},{24:$Vb,76:$V51,89:$Vc},{76:$V11},{26:[2,12]},{16:81,23:226,87:13,88:14,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6},o($Vh1,[2,16]),o([8,21,22,62,90,121,122,143],[2,138],{124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o([8,21,22,62,90,122,143],[2,139],{121:$VI,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($Vz1,[2,141],{130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($Vz1,[2,142],{130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($Vz1,[2,143],{130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($Vz1,[2,144],{130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($VA1,[2,145],{124:$VK,125:$VL,126:$VM,127:$VN,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($VA1,[2,146],{124:$VK,125:$VL,126:$VM,127:$VN,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($VB1,[2,147],{132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($VB1,[2,148],{132:$VS,133:$VT,134:$VU,141:$VV,142:$VW}),o($VC1,[2,149],{141:$VV,142:$VW}),o($VC1,[2,150],{141:$VV,142:$VW}),o($VC1,[2,151],{141:$VV,142:$VW}),o($VY,[2,158]),o($VY,[2,159]),{62:[1,227],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,228],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,229],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,230],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,231],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,232],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{21:[1,233],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},o($VY,[2,165]),{62:[1,235],90:[1,234]},o($VD1,[2,120],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),o($VD1,[2,121]),o($VD1,[2,122]),o($V21,[2,110]),{19:[1,236]},{19:[1,237]},{19:[1,238]},{19:[1,239]},{19:[1,240]},o($V21,[2,109]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:241,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($V21,[2,111]),{21:[1,242],22:$Vp1},o($V21,[2,48]),{19:[1,243]},{21:[1,244],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{8:[2,17]},o($V0,[2,20]),o($Vr1,[2,25]),o($Vt1,[2,27]),o($Vt1,[2,33]),o($Vt1,[2,34]),o($Vt1,[2,35]),o($Vt1,[2,36]),o($Vt1,[2,37]),o($Vt1,[2,38]),o([24,28,45,46,51,56,60,65,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],[2,56],{50:245,53:246,54:$Vu1,55:[1,247]}),o($Vt1,[2,52]),{19:$Vv1,52:248},{24:[1,249]},{7:130,9:131,16:143,17:147,24:$V61,26:$Vw1,31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,42:250,44:213,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:251,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{66:[1,252]},{7:130,9:131,16:143,17:147,24:$V61,28:[1,254],31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,43:253,44:255,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($Vt1,[2,41]),o($Vt1,[2,44]),{8:[1,256]},{8:[1,257]},{7:258,16:143,87:13,88:14,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6},{72:[1,259]},o($VH,[2,93]),o($VH,[2,94]),{17:53,19:$Vj,21:[1,261],24:$Vk,32:57,47:260,61:49,69:112,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,21:[1,263],24:$Vk,32:57,47:262,61:49,69:112,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{77:[1,264],79:[1,265],99:182,109:$Vk1,110:$Vl1,111:$Vm1,112:$Vn1,113:$Vo1},{8:[2,83],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{7:130,9:131,16:143,17:147,24:$V61,26:$VE1,30:266,31:268,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($Vh1,[2,14]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:269,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($VY,[2,152]),o($VY,[2,153]),o($VY,[2,154]),o($VY,[2,155]),o($VY,[2,156]),o($VY,[2,157]),o($V21,[2,107]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:179,73:48,78:270,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vi1,108:$Vj1,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:271,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:272,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{21:[1,273]},{21:[1,274]},{21:[1,275]},o($Vq1,[2,79],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),o($V21,[2,47]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:276,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($V21,[2,130]),o($Vt1,[2,49]),o($Vt1,[2,51]),{7:130,9:131,16:143,17:147,24:$V61,26:$VE1,30:277,31:268,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{7:130,9:131,16:143,17:147,24:$V61,26:$VE1,30:278,31:268,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{21:[1,279]},o($Vt1,[2,67]),{21:[1,280],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{19:$Vv1,52:281},{7:130,9:131,16:143,17:147,24:$V61,28:[1,282],31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,44:283,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($Vt1,[2,40]),o($VF1,[2,43]),o($Vt1,[2,45]),o($Vt1,[2,46]),{8:[1,284]},{17:286,24:$Vk,32:57,73:285,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{21:[1,287],22:$Vp1},o($VH,[2,76]),{21:[1,288],22:$Vp1},o($VH,[2,78]),{19:[1,289]},{19:[1,290]},o($Vt1,[2,50]),{7:130,9:131,16:143,17:147,24:$V61,28:[1,292],29:291,31:123,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($Vt1,[2,24]),o([8,21,22,62,90],[2,160],{121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX}),{90:[1,293]},{21:[1,294],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{22:[1,295],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},o($V21,[2,126]),o($V21,[2,127]),o($V21,[2,128]),{21:[1,296],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},o($Vt1,[2,55]),o($Vt1,[2,54]),{26:[1,298],57:297},o([8,24,26,45,46,51,56,66,67,68,74,75,80,89,91,92,93,94,95,96,100,117,118,119,120],[2,85]),{8:[1,299]},o($Vt1,[2,39]),o($VF1,[2,42]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:300,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{7:130,9:131,16:143,17:147,24:$V61,26:$Vw1,31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,42:301,44:213,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o([24,26,45,46,51,56,66,67,68,74,75,80,85,86,91,92,93,94,95,96,100,117,118,119,120],$VZ,{76:$V_,89:$V$}),o($VH,[2,75]),o($VH,[2,77]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:179,73:48,78:302,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vi1,108:$Vj1,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{17:53,19:$Vj,24:$Vk,32:57,61:49,69:303,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},{7:130,9:131,16:143,17:147,24:$V61,28:[1,304],31:197,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($Vt1,[2,23]),o($V21,[2,108]),o($V21,[2,124]),{17:53,19:$Vj,24:$Vk,32:57,61:49,69:305,73:48,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,97:50,98:$Vm,100:$Vn,101:56,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw,123:$Vx,131:$Vy,135:$Vz,136:$VA,137:$VB,138:$VC,139:$VD,140:$VE},o($V21,[2,129]),o($Vt1,[2,57]),o($VG1,[2,60],{58:306}),o($Vt1,[2,68]),{8:[1,307],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},o($Vt1,[2,74]),{21:[1,308]},{21:[1,309],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},o($Vt1,[2,22]),{21:[1,310],121:$VI,122:$VJ,124:$VK,125:$VL,126:$VM,127:$VN,128:$VO,129:$VP,130:$VQ,131:$VR,132:$VS,133:$VT,134:$VU,141:$VV,142:$VW,143:$VX},{28:[1,311],59:312,60:[1,313],65:[1,314]},{9:316,17:286,24:$V61,32:57,38:318,39:317,70:315,73:144,74:$Vc1,75:$Vd1,88:65,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},{8:[2,81]},{8:[2,82]},o($V21,[2,125]),o($Vt1,[2,58]),o($VG1,[2,59]),{61:319,100:[1,320],102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs},{62:[1,321]},{21:[1,322]},{21:[2,71]},{21:[2,72]},{21:[2,73]},{62:[1,323]},{62:$V01},o($VH1,$VI1,{87:13,101:56,115:66,31:123,32:124,33:125,34:126,35:127,36:128,37:129,7:130,9:131,38:132,39:133,40:134,41:135,48:137,71:142,16:143,73:144,17:147,88:150,63:324,29:325,24:$V61,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,74:$Vc1,75:$Vd1,80:$Ve1,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,117:$Vt,118:$Vu,119:$Vv,120:$Vw}),{7:130,9:131,16:143,17:147,24:$V61,26:$Vw1,31:214,32:124,33:125,34:126,35:127,36:128,37:129,38:132,39:133,40:134,41:135,42:326,44:213,45:$Vx1,46:$Vy1,48:137,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,71:142,73:144,74:$Vc1,75:$Vd1,80:$Ve1,87:13,88:150,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,101:56,115:66,117:$Vt,118:$Vu,119:$Vv,120:$Vw},o($VH1,$VI1,{87:13,101:56,115:66,31:123,32:124,33:125,34:126,35:127,36:128,37:129,7:130,9:131,38:132,39:133,40:134,41:135,48:137,71:142,16:143,73:144,17:147,88:150,29:325,63:327,24:$V61,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,74:$Vc1,75:$Vd1,80:$Ve1,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,117:$Vt,118:$Vu,119:$Vv,120:$Vw}),o($VG1,$VJ1,{64:328,45:$VK1}),o($VH1,[2,65],{87:13,101:56,115:66,32:124,33:125,34:126,35:127,36:128,37:129,7:130,9:131,38:132,39:133,40:134,41:135,48:137,71:142,16:143,73:144,17:147,88:150,31:197,24:$V61,51:$V71,56:$V81,66:$V91,67:$Va1,68:$Vb1,74:$Vc1,75:$Vd1,80:$Ve1,89:$Vl,91:$V1,92:$V2,93:$V3,94:$V4,95:$V5,96:$V6,100:$Vf1,117:$Vt,118:$Vu,119:$Vv,120:$Vw}),o($Vt1,[2,69]),o($VG1,$VJ1,{64:330,45:$VK1}),o($VG1,[2,62]),{8:[1,331]},o($VG1,[2,61]),o($VG1,[2,63])],
defaultActions: {3:[2,1],27:[2,10],28:[2,11],67:[2,134],68:[2,135],69:[2,136],70:[2,137],79:[2,13],152:[2,12],195:[2,17],308:[2,81],309:[2,82],316:[2,71],317:[2,72],318:[2,73],320:[2,118]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


  const {Print} = require("../Instrucciones/Print");

    var listaErroresParser = [];

    function addError(type, lexem, first_line, first_column) {
        var auxError = 'Error '+type+' Token: '+ lexem + ' Linea: '+first_line + ' Columna: ' +first_column +'\n';
        listaErroresParser.push(auxError); 
    }
    function addError(auxError) {
        listaErroresParser.push(auxError + '\n'); 
    }
    function getErrorList(){
        return listaErroresParser;
    }
    //exports.listaErroresParser = getErrorList();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/;
break;
case 1:/*ignore*/;
break;
case 2:/*ignore*/;
break;
case 3: return 19;              
break;
case 4: return 21;                 
break;
case 5: return 26;              
break;
case 6: return 28;                 
break;
case 7: return 89;              
break;
case 8: return 90;                 
break;
case 9: return 8;                
break;
case 10: return 62;                
break;
case 11: return 22;                      
break;
case 12: return 76;                     
break;
case 13: return 143 
break;
case 14: return 98;                      
break;
case 15: return 106;    
break;
case 16: return 91;     
break;
case 17: return 92;  
break;
case 18: return 96;   
break;
case 19: return 93; 
break;
case 20: return 94;    
break;
case 21: return 95;  
break;
case 22: return 25; 
break;
case 23: return 85;   
break;
case 24: return 86;   
break;
case 25: return 130;    
break;
case 26: return 131;    
break;
case 27: return 132;    
break;
case 28: return 133;    
break;
case 29: return 134;          
break;
case 30: return 135;          
break;
case 31: return 136;         
break;
case 32: return 137;        
break;
case 33: return 138;          
break;
case 34: return 139;          
break;
case 35: return 140;          
break;
case 36: return 129;     
break;
case 37: return 128; 
break;
case 38: return 126;     
break;
case 39: return 127;     
break;
case 40: return 124;           
break;
case 41: return 125;           
break;
case 42: return 121;        
break;
case 43: return 122;         
break;
case 44: return 123;        
break;
case 45: return 141; 
break;
case 46: return 142; 
break;
case 47: return 109; 
break;
case 48: return 110;          
break;
case 49: return 111;             
break;
case 50: return 112;        
break;
case 51: return 113;        
break;
case 52: return 74;    
break;
case 53: return 75;  
break;
case 54: return 84;    
break;
case 55: return 114;        
break;
case 56: return 117;        
break;
case 57: return 118;     
break;
case 58: return 119; 
break;
case 59: return 120;       
break;
case 60: return 80; 
break;
case 61: return 12;  
break;
case 62: return 18; 
break;
case 63: return 51;    
break;
case 64: return 54; 
break;
case 65: return 55;  
break;
case 66: return 56;   
break;
case 67: return 60;     
break;
case 68: return 45;    
break;
case 69: return 65;  
break;
case 70: return 66;  
break;
case 71: return 67;     
break;
case 72: return 68;    
break;
case 73: return 72;     
break;
case 74: return 46;  
break;
case 75: return 107; 
break;
case 76: return 108;   
break;
case 77: return 79; 
break;
case 78: return 77;  
break;
case 79: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 100; 
            
break;
case 80: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 105;
            
break;
case 81: return 103; 
break;
case 82: return 102;  
break;
case 83: return 104; 
break;
case 84: return 24; 
break;
case 85:return 5;
break;
case 86:addError("Lexico", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1)      
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:=)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:true|false\b)/,/^(?:[aA-zZ|"_"]([aA-zZ]|[0-9]|_)*)/,/^(?:$)/,/^(?:[^\s]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this)}).call(this,require('_process'))
},{"../Instrucciones/Print":1,"_process":6,"fs":4,"path":5}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":6}],6:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[2]);
