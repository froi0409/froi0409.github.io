/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,24,25,90,91,92,93,94,95],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[16,23],$V8=[16,23,88],$V9=[1,30],$Va=[9,20],$Vb=[2,85],$Vc=[1,33],$Vd=[1,37],$Ve=[1,52],$Vf=[1,39],$Vg=[1,64],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,60],$Vm=[1,61],$Vn=[1,63],$Vo=[1,81],$Vp=[1,92],$Vq=[1,95],$Vr=[1,96],$Vs=[1,97],$Vt=[1,91],$Vu=[1,83],$Vv=[1,84],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,98],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[1,70],$VF=[1,80],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[5,24,25,51,55,90,91,92,93,94,95],$VN=[5,9,23,24,25,28,46,51,52,55,58,67,68,69,77,78,83,90,91,92,93,94,95],$VO=[2,114],$VP=[1,113],$VQ=[51,55],$VR=[1,117],$VS=[1,119],$VT=[1,121],$VU=[1,122],$VV=[1,123],$VW=[1,126],$VX=[1,134],$VY=[23,26,52,58,67,68,69,77,78,83,90,91,92,93,94,95],$VZ=[19,20,28],$V_=[1,136],$V$=[1,137],$V01=[1,138],$V11=[1,139],$V21=[1,140],$V31=[1,141],$V41=[1,142],$V51=[1,143],$V61=[1,144],$V71=[1,145],$V81=[1,146],$V91=[1,147],$Va1=[1,148],$Vb1=[1,149],$Vc1=[1,150],$Vd1=[1,151],$Ve1=[9,19,20,64,89,120,121,123,124,125,126,127,128,129,130,131,132,133,140,141,142],$Vf1=[2,98],$Vg1=[1,162],$Vh1=[1,161],$Vi1=[2,110],$Vj1=[1,166],$Vk1=[9,19,20,26,45,46,47,64,74,75,89,120,121,123,124,125,126,127,128,129,130,131,132,133,140,141,142],$Vl1=[9,23,28,46,52,58,67,68,69,77,78,83,90,91,92,93,94,95],$Vm1=[5,9,23,24,25,28,45,46,47,51,52,55,58,67,68,69,77,78,83,90,91,92,93,94,95],$Vn1=[1,222],$Vo1=[1,223],$Vp1=[1,225],$Vq1=[1,226],$Vr1=[1,227],$Vs1=[1,228],$Vt1=[1,229],$Vu1=[1,231],$Vv1=[19,20,89],$Vw1=[28,45,46,47],$Vx1=[1,245],$Vy1=[9,19],$Vz1=[9,19,20,64,89,120,121,123,124,125,126,127,128,142],$VA1=[9,19,20,64,89,120,121,127,128,142],$VB1=[9,19,20,64,89,120,121,123,124,125,126,127,128,129,130,142],$VC1=[9,19,20,64,89,120,121,123,124,125,126,127,128,129,130,131,132,133,142],$VD1=[19,64,89],$VE1=[28,62,66],$VF1=[2,60],$VG1=[1,312];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones_globales_block":4,"EOF":5,"instrucciones_globales_unit":6,"instrucciones_funciones_declaracion_tipo_funciones":7,"instrucciones_variables_declaracion_conjunto":8,"PUNTO_COMA":9,"instrucciones_funciones_declaracion":10,"declarar_struct":11,"instrucciones_funciones_declaracion_nombre_funciones":12,"instrucciones_funciones_declaracion_parametros":13,"instrucciones_block":14,"nombres_variables_unidad":15,"MAIN":16,"PAREN_INICIO":17,"instrucciones_funciones_declaracion_parametros_bloque":18,"PAREN_FIN":19,"COMA":20,"instrucciones_funciones_declaracion_parametros_unidad":21,"tipo_datos_generales":22,"IDENTIFICADOR":23,"VOID":24,"STRUCT":25,"LLAVE_INICIO":26,"declarar_struct_variables":27,"LLAVE_FIN":28,"instrucciones_unidad_varios":29,"instrucciones_unidad":30,"instrucciones_funciones_llamada":31,"instrucciones_sentencia_control_ifs":32,"instrucciones_sentencia_control_switch":33,"instrucciones_loops_while":34,"instrucciones_loops_do_while":35,"instrucciones_loops_for":36,"instrucciones_variables_declaracion":37,"instrucciones_variables_asignacion":38,"instrucciones_print":39,"instrucciones_arreglos_push_pop":40,"instrucciones_return":41,"instrucciones_block_loops":42,"instrucciones_unidad_varios_loops":43,"instrucciones_unidad_loops":44,"instrucciones_funidad":45,"BREAK":46,"CONTINUE":47,"instrucciones_print_valores":48,"instrucciones_sentencia_control_ifs_if":49,"instrucciones_sentencia_control_ifs_else_if_block":50,"instrucciones_sentencia_acontrol_ifs_else":51,"IF":52,"condicion":53,"instrucciones_sentencia_control_ifs_else_if":54,"ELSE_IF":55,"instrucciones_sentencia_control_ifs_else":56,"ELSE":57,"SWITCH":58,"instrucciones_sentencia_control_switch_cuerpo":59,"instrucciones_sentencia_control_switch_cuerpo_case_varios":60,"instrucciones_sentencia_control_switch_cuerpo_case":61,"CASE":62,"valores_datos_primarios":63,"DOS_PUNTOS":64,"instrucciones_sentencia_control_switch_cuerpo_case_break":65,"DEFAULT":66,"WHILE":67,"DO":68,"FOR":69,"operacion_general":70,"instrucciones_for":71,"instrucciones_loops_for_each":72,"valores_datos":73,"INCREMENTO":74,"DECREMENTO":75,"IN":76,"PRINT":77,"PRINTLN":78,"PUNTO":79,"POP":80,"arreglos_valores_posiciones":81,"PUSH":82,"RETURN":83,"instrucciones_variables_declaracion_simple":84,"IGUAL":85,"tipo_datos_arreglo":86,"tipo_datos_primarios":87,"CORCH_INICIO":88,"CORCH_FIN":89,"INT":90,"DOUBLE":91,"BOOLEAN":92,"CHAR":93,"STRING":94,"FLOAT":95,"valores_datos_arreglos":96,"GATO":97,"CORCH_INI":98,"funciones_con_valor_string":99,"STRING_VALUE":100,"funciones_con_valor_parsing":101,"ENTERO_VALUE":102,"DECIMAL_VALUE":103,"BOOLEAN_VALUE":104,"CHAR_VALUE":105,"BEGIN":106,"END":107,"CARACTEROFPOSITION":108,"SUBSTRING":109,"LENGTH":110,"TOUPPERCASE":111,"TOLOWERCASE":112,"funciones_con_valor_parsing_tipo_datos":113,"PARSE":114,"funciones_con_valor_parsing_tipo_parseo":115,"TOINT":116,"TODOUBLE":117,"STRING_PARSE":118,"TYPEOF":119,"AND":120,"OR":121,"NOT":122,"MAYOR":123,"MENOR":124,"MAYOR_IGUAL":125,"MENOR_IGUAL":126,"DIFERENTE_IGUAL":127,"IGUAL_IGUAL":128,"SIGNO_MAS":129,"SIGNO_MIN":130,"SIGNO_POR":131,"SIGNO_DIV":132,"MOD":133,"POW":134,"SQRT":135,"LOG10":136,"SIN":137,"COS":138,"TAN":139,"CONCAT_AND":140,"CONCAT_POW":141,"SIGNO_INTERROGACION_CIERRE":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PUNTO_COMA",16:"MAIN",17:"PAREN_INICIO",19:"PAREN_FIN",20:"COMA",23:"IDENTIFICADOR",24:"VOID",25:"STRUCT",26:"LLAVE_INICIO",28:"LLAVE_FIN",45:"instrucciones_funidad",46:"BREAK",47:"CONTINUE",51:"instrucciones_sentencia_acontrol_ifs_else",52:"IF",55:"ELSE_IF",57:"ELSE",58:"SWITCH",62:"CASE",64:"DOS_PUNTOS",66:"DEFAULT",67:"WHILE",68:"DO",69:"FOR",74:"INCREMENTO",75:"DECREMENTO",76:"IN",77:"PRINT",78:"PRINTLN",79:"PUNTO",80:"POP",82:"PUSH",83:"RETURN",85:"IGUAL",88:"CORCH_INICIO",89:"CORCH_FIN",90:"INT",91:"DOUBLE",92:"BOOLEAN",93:"CHAR",94:"STRING",95:"FLOAT",97:"GATO",98:"CORCH_INI",100:"STRING_VALUE",102:"ENTERO_VALUE",103:"DECIMAL_VALUE",104:"BOOLEAN_VALUE",105:"CHAR_VALUE",106:"BEGIN",107:"END",108:"CARACTEROFPOSITION",109:"SUBSTRING",110:"LENGTH",111:"TOUPPERCASE",112:"TOLOWERCASE",114:"PARSE",116:"TOINT",117:"TODOUBLE",118:"STRING_PARSE",119:"TYPEOF",120:"AND",121:"OR",122:"NOT",123:"MAYOR",124:"MENOR",125:"MAYOR_IGUAL",126:"MENOR_IGUAL",127:"DIFERENTE_IGUAL",128:"IGUAL_IGUAL",129:"SIGNO_MAS",130:"SIGNO_MIN",131:"SIGNO_POR",132:"SIGNO_DIV",133:"MOD",134:"POW",135:"SQRT",136:"LOG10",137:"SIN",138:"COS",139:"TAN",140:"CONCAT_AND",141:"CONCAT_POW",142:"SIGNO_INTERROGACION_CIERRE"},
productions_: [0,[3,2],[4,2],[4,0],[6,3],[6,2],[6,2],[10,3],[12,1],[12,1],[13,3],[13,2],[18,3],[18,1],[21,2],[7,1],[7,1],[11,5],[27,1],[27,0],[14,3],[14,2],[14,1],[29,2],[29,1],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,2],[30,2],[30,2],[30,2],[30,2],[42,3],[42,2],[42,1],[43,2],[43,1],[44,1],[44,2],[44,2],[31,4],[31,3],[32,3],[49,3],[50,2],[50,0],[54,3],[56,2],[56,0],[33,5],[59,3],[60,2],[60,0],[61,6],[61,5],[65,2],[65,0],[34,3],[35,5],[36,9],[36,1],[71,1],[71,1],[71,2],[71,2],[72,5],[39,4],[39,3],[39,4],[39,3],[48,3],[48,1],[40,6],[40,6],[41,2],[41,1],[53,3],[37,2],[8,3],[8,1],[84,1],[84,1],[38,3],[22,1],[22,1],[86,3],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[96,2],[96,2],[73,1],[73,4],[73,6],[73,3],[73,3],[73,3],[73,1],[73,1],[63,1],[63,1],[63,1],[63,1],[63,1],[81,1],[81,1],[81,1],[15,1],[99,4],[99,6],[99,3],[99,3],[99,3],[101,6],[101,4],[113,1],[113,1],[113,1],[115,1],[115,1],[115,1],[115,1],[70,3],[70,3],[70,2],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,4],[70,4],[70,4],[70,4],[70,4],[70,4],[70,3],[70,3],[70,5],[70,1],[70,1],[70,1],[70,2],[70,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
/*return reversaArreglo($$[$0-1]);*/
break;
case 7:
 console.log('Funcion tipo: ' + $$[$0-2] + ' nombre: ' + $$[$0-1]); 
break;
case 8: case 9: case 15: case 16: case 87: case 88: case 90: case 91: case 92: case 93: case 94: case 95: case 112: case 113: case 114: case 122: case 123: case 124: case 125: case 126: case 127: case 128:
 this.$ = $$[$0]; 
break;
case 10:
 console.log('Funcion con parametros'); 
break;
case 11:
 console.log('Funcion sin parametros'); 
break;
case 12:
 console.log(', Dato: ' + $$[$0]); 
break;
case 13:
 console.log('Dato: ' + $$[$0]); 
break;
case 14:
 this.$ = ' ' + $$[$0] + ' : ' + $$[$0-1] ; 
break;
case 17:
 console.log('Struct con nombre: ' + $$[$0-3]); 
break;
case 19:
 console.log('Sin datos'); 
break;
case 20:
 console.log('Bloque de instrucciones con muchos datos: '); 
break;
case 21:
 console.log('Bloque de instrucciones sin datos: '); 
break;
case 22:
 console.log('Bloque de instrucciones con una sola instruccion: '); 
break;
case 25:
 console.log('Se efectuo llamada de funcion: '); 
break;
case 26:
 console.log('Se efectuo llamada de IF: '); 
break;
case 27:
 console.log('Se efectuo llamada de SWITCH: '); 
break;
case 28:
 console.log('Se efectuo llamada de WHILE: '); 
break;
case 29:
 console.log('Se efectuo llamada de DO WHILE: '); 
break;
case 30:
 console.log('Se efectuo llamada de FOR: '); 
break;
case 31:
 console.log('Se efectuo llamada de declaracion: '); 
break;
case 32:
 console.log('Se efectuo llamada de asignacion de valores: '); 
break;
case 33:
 console.log('Se efectuo llamada de print: '); 
break;
case 34:
 console.log('Se efectuo llamada de pop o push: '); 
break;
case 35:
 console.log('Se efectuo llamada de return: '); 
break;
case 36:
 console.log('Se efectuo llamada de bloques para LOOPS: '); 
break;
case 37:
 console.log('Se efectuo llamada de bloques sin instrucciones para LOOPS: '); 
break;
case 38:
 console.log('Se efectuo llamada de bloques con una sola instruccion para LOOPS: '); 
break;
case 42:
 console.log('Se efectuo llamada de BREAK LOOPS: '); 
break;
case 43:
 console.log('Se efectuo llamada de CONTINUE LOOPS: '); 
break;
case 44:
 console.log('Se efectua llamada a la funcion con nombre: ' + $$[$0-3] + ' y tiene los parametros ya mostrados'); 
break;
case 45:
 console.log('Se efectua llamada a la funcion con nombre: ' + $$[$0-2] + ' y NO TIENE PARAMETROS'); 
break;
case 47:
 console.log('Se efectua IF'); 
break;
case 50:
 console.log('Se efectua else if'); 
break;
case 51:
 console.log('Se efectua else'); 
break;
case 53:
 console.log('Switch para: ' + $$[$0-2]); 
break;
case 57:
 console.log('Se efectua CASE'); 
break;
case 58:
 console.log('Se efectua DEFAULT'); 
break;
case 59:
 console.log('Se efectua BREAK SWITCH'); 
break;
case 60:
 console.log('Se efectua SIN BREAK'); 
break;
case 67:
 console.log('accion de INCREMENTO'); 
break;
case 68:
 console.log('accion de DECREMENTO'); 
break;
case 69:
 console.log('Se ejecuta for Each'); 
break;
case 70:
 console.log('Print con valores'); 
break;
case 71: case 73:
 console.log('Print vacio'); 
break;
case 72:
 console.log('Println con valores'); 
break;
case 74:
 console.log(', ValorOpG'); 
break;
case 75:
 console.log('ValorOpG'); 
break;
case 76:
 console.log('Se ejecuta un pop'); 
break;
case 77:
 console.log('Se ejecuta un push'); 
break;
case 78:
 console.log('Se ejecuta un RETURN con valor'); 
break;
case 79:
 console.log('Se ejecuta un RETURN '); 
break;
case 80:
 console.log('Se efectua una condicion'); 
break;
case 81:
 console.log('Se declaran variables del tipo: ' + $$[$0-1] + ' , var de arriba'); 
break;
case 85:
 console.log('NombreVar: ' + $$[$0]); 
break;
case 86:
 console.log('NombreVar: ' + $$[$0-2] + '=Valor'); 
break;
case 89:
 this.$ = $$[$0-2] + '[]'; 
break;
case 96:
 console.log('CopiarArreglos con #' + $$[$0]); 
break;
case 97:
 console.log('Efectuar acciones con' + $$[$0-1] + '#'); 
break;
case 98:
 console.log('Datos, nombre de variable simple: ' + $$[$0]); 
break;
case 99:
 console.log('Datos ArrayEnLaPos, var[' + $$[$0-1] + '] '); 
break;
case 100:
 console.log('Datos ArrayEnRango, var[' + $$[$0-3] + ':' + $$[$0-1] + '] '); 
break;
case 101:
 console.log('Datos Array de datos de los mencionados, var[' + '....., los que aparecen arriba] '); 
break;
case 102:
 console.log('Datos variablesString.' + $$[$0]); 
break;
case 103:
 console.log('Datos String.' + $$[$0]); 
break;
case 104:
 console.log('Datos funcion parsing : ' + $$[$0]); 
break;
case 111:
 this.$ = 'OperacionGeneral'; 
break;
case 115:
 this.$ = $$[$0-3]+ '(valor)'; 
break;
case 116:
 this.$ = $$[$0-5] + '(valor, valor2)'; 
break;
case 117: case 118: case 119:
 this.$ = $$[$0-2] + '()'; 
break;
case 120:
 this.$ = $$[$0-5] + '.parse(valor)'; 
break;
case 121:
 this.$ = $$[$0-3] + '(valor)'; 
break;
case 129:
 console.log('Se efectua AND'); 
break;
case 130:
 console.log('Se efectua OR'); 
break;
case 131:
 console.log('Se efectua NOT'); 
break;
case 132:
 console.log('Se efectua MAYOR'); 
break;
case 133:
 console.log('Se efectua MENOR'); 
break;
case 134:
 console.log('Se efectua MAYOR_IGUAL'); 
break;
case 135:
 console.log('Se efectua MENOR_IGUAL'); 
break;
case 136:
 console.log('Se efectua DIFERENTE_IGUAL'); 
break;
case 137:
 console.log('Se efectua IGUAL_IGUAL'); 
break;
case 138:
 console.log('Se efectua SIGNO_MAS'); 
break;
case 139:
 console.log('Se efectua SIGNO_MIN'); 
break;
case 140:
 console.log('Se efectua SIGNO_POR'); 
break;
case 141:
 console.log('Se efectua SIGNO_DIV'); 
break;
case 142:
 console.log('Se efectua MOD'); 
break;
case 143:
 console.log('Se efectua POW'); 
break;
case 144:
 console.log('Se efectua SQRT'); 
break;
case 145:
 console.log('Se efectua LOG10'); 
break;
case 146:
 console.log('Se efectua SIN'); 
break;
case 147:
 console.log('Se efectua COS'); 
break;
case 148:
 console.log('Se efectua TAN'); 
break;
case 149:
 console.log('Se efectua CONCAT_AND'); 
break;
case 150:
 console.log('Se efectua CONCAT_POW'); 
break;
case 151:
 console.log('Se efectua OPERACION TERNARIO'); 
break;
case 152:
 console.log('Se efectua valores_datos'); 
break;
case 153:
 console.log('Se efectua valores_primarios'); 
break;
case 154:
 console.log('Se efectua valores_datos_arreglos'); 
break;
case 155:
 console.log('Se efectua SIGNO_MENOS UMINUS'); 
break;
case 156:
 console.log('Se efectua AGRUPACION POR ()'); 
break;
}
},
table: [o($V0,[2,3],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,11:6,22:8,24:[1,7],25:[1,9],86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{1:[2,1]},o($V0,[2,2]),{8:18,10:19,12:21,15:24,16:[1,25],23:[1,23],38:22,84:20},{9:[1,26]},o($V7,[2,15]),o($V7,[2,16]),{23:[1,27]},o($V7,[2,87]),o($V7,[2,88],{88:[1,28]}),o($V8,[2,90]),o($V8,[2,91]),o($V8,[2,92]),o($V8,[2,93]),o($V8,[2,94]),o($V8,[2,95]),{9:[1,29],20:$V9},o($V0,[2,5]),o($Va,[2,83]),{13:31,17:[1,32]},o($Va,[2,84]),o([9,17,20],$Vb,{85:$Vc}),{17:[2,8]},{17:[2,9]},o($V0,[2,6]),{26:[1,34]},{89:[1,35]},o($V0,[2,4]),{23:$Vd,38:22,84:36},{14:38,15:62,22:59,23:$Ve,26:$Vf,30:40,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{18:65,19:[1,66],21:67,22:68,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:69,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{18:103,21:67,22:68,27:102,28:[2,19],86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($V7,[2,89]),o($Va,[2,82]),o($Va,$Vb,{85:$Vc}),o($V0,[2,7]),{15:62,22:59,23:$Ve,28:[1,105],29:104,30:106,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($VM,[2,22]),{9:[1,107]},o($VN,[2,26]),o($VN,[2,27]),o($VN,[2,28]),o($VN,[2,29]),o($VN,[2,30]),{9:[1,108]},{9:[1,109]},{9:[1,110]},{9:[1,111]},{9:[1,112]},o([74,75,79,98],$VO,{17:$VP,85:$Vc}),o($VQ,[2,49],{50:114}),{17:[1,115]},{17:$VR,53:116},{26:$VS,42:118,44:120,45:$VT,46:$VU,47:$VV},{15:125,17:[1,124],23:$VW},o($VN,[2,64]),{8:127,23:$Vd,38:22,84:20},{17:[1,128]},{17:[1,129]},{79:[1,130]},{9:[2,79],15:82,17:$Vo,23:$Vp,31:86,63:78,70:131,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{17:$VR,53:132},{19:[1,133],20:$VX},o($VY,[2,11]),o($VZ,[2,13]),{23:[1,135]},o([9,19,20],[2,86],{120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1}),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:152,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{17:[1,153]},{17:[1,154]},{17:[1,155]},{17:[1,156]},{17:[1,157]},{17:[1,158]},o($Ve1,[2,152]),o($Ve1,[2,153]),o($Ve1,[2,154]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:159,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:160,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Ve1,$Vf1,{79:$Vg1,97:[1,163],98:$Vh1}),{15:82,17:$Vo,23:$Vp,31:86,48:164,63:78,70:165,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Ve1,$Vi1,{79:$Vj1}),o($Vk1,[2,104]),o($Vk1,[2,105]),o($Ve1,[2,106]),o($Ve1,[2,107]),o($Ve1,[2,108]),o($Ve1,[2,109]),{15:167,23:$VW},o([9,19,20,26,45,46,47,64,79,89,97,98,120,121,123,124,125,126,127,128,129,130,131,132,133,140,141,142],$VO,{17:$VP}),{79:[1,168]},{17:[1,169]},{79:[2,122]},{79:[2,123]},{79:[2,124]},{17:[2,125]},{17:[2,126]},{17:[2,127]},{17:[2,128]},{28:[1,170]},{20:$VX,28:[2,18]},{15:62,22:59,23:$Ve,28:[1,171],30:172,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($VM,[2,21]),o($Vl1,[2,24]),o($VN,[2,25]),o($VN,[2,31]),o($VN,[2,32]),o($VN,[2,33]),o($VN,[2,34]),o($VN,[2,35]),{15:82,17:$Vo,19:[1,174],23:$Vp,31:86,48:173,63:78,70:165,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{51:[1,175],54:176,55:[1,177]},{23:[1,178]},{26:$VS,42:179,44:120,45:$VT,46:$VU,47:$VV},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:180,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{67:[1,181]},{28:[1,183],43:182,44:184,45:$VT,46:$VU,47:$VV},o($VN,[2,38]),o($Vm1,[2,41]),{9:[1,185]},{9:[1,186]},{22:59,37:187,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{76:[1,188]},o([9,19,20,64,76,89,120,121,123,124,125,126,127,128,129,130,131,132,133,140,141,142],$VO),{9:[2,81],20:$V9},{15:82,17:$Vo,19:[1,190],23:$Vp,31:86,48:189,63:78,70:165,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,19:[1,192],23:$Vp,31:86,48:191,63:78,70:165,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{80:[1,193],82:[1,194]},{9:[2,78],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{14:195,15:62,22:59,23:$Ve,26:$Vf,30:40,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($VY,[2,10]),{21:196,22:68,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($VZ,[2,14]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:197,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:198,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:199,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:200,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:201,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:202,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:203,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:204,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:205,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:206,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:207,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:208,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:209,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:210,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:211,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:212,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Ve1,[2,131]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:213,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:214,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:215,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:216,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:217,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:218,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Ve1,[2,155]),{19:[1,219],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:221,73:77,81:220,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$Vn1,107:$Vo1,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{99:224,108:$Vp1,109:$Vq1,110:$Vr1,111:$Vs1,112:$Vt1},o($Ve1,[2,97]),{20:$Vu1,89:[1,230]},o($Vv1,[2,75],{120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1}),{99:232,108:$Vp1,109:$Vq1,110:$Vr1,111:$Vs1,112:$Vt1},o($Ve1,[2,96]),{114:[1,233]},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:234,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{9:[2,17]},o($VM,[2,20]),o($Vl1,[2,23]),{19:[1,235],20:$Vu1},o($Vk1,[2,45]),o($VN,[2,46]),o($VQ,[2,48]),{17:$VR,53:236},{19:[1,237]},o($VN,[2,61]),{19:[1,238],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{17:$VR,53:239},{28:[1,240],44:241,45:$VT,46:$VU,47:$VV},o($VN,[2,37]),o($Vw1,[2,40]),o($Vm1,[2,42]),o($Vm1,[2,43]),{9:[1,242]},{15:244,23:$Vp,31:86,73:243,90:$Vq,91:$Vr,92:$Vs,98:$Vu,100:$Vx1,101:85,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD},{19:[1,246],20:$Vu1},o($Vy1,[2,71]),{19:[1,247],20:$Vu1},o($Vy1,[2,73]),{17:[1,248]},{17:[1,249]},o($VQ,[2,47]),o($VZ,[2,12]),o([9,19,20,64,89,120,121,142],[2,129],{123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o([9,19,20,64,89,121,142],[2,130],{120:$V_,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($Vz1,[2,132],{129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($Vz1,[2,133],{129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($Vz1,[2,134],{129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($Vz1,[2,135],{129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($VA1,[2,136],{123:$V01,124:$V11,125:$V21,126:$V31,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($VA1,[2,137],{123:$V01,124:$V11,125:$V21,126:$V31,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($VB1,[2,138],{131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($VB1,[2,139],{131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1}),o($VC1,[2,140],{140:$Vb1,141:$Vc1}),o($VC1,[2,141],{140:$Vb1,141:$Vc1}),o($VC1,[2,142],{140:$Vb1,141:$Vc1}),o($Ve1,[2,149]),o($Ve1,[2,150]),{64:[1,250],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,251],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,252],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,253],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,254],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,255],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{19:[1,256],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},o($Ve1,[2,156]),{64:[1,258],89:[1,257]},o($VD1,[2,111],{120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1}),o($VD1,[2,112]),o($VD1,[2,113]),o($Vk1,[2,102]),{17:[1,259]},{17:[1,260]},{17:[1,261]},{17:[1,262]},{17:[1,263]},o($Vk1,[2,101]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:264,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Vk1,[2,103]),{17:[1,265]},{19:[1,266],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},o($Vk1,[2,44]),{14:267,15:62,22:59,23:$Ve,26:$Vf,30:40,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{26:[1,269],59:268},o([9,23,26,45,46,47,52,58,67,68,69,77,78,83,90,91,92,93,94,95],[2,80]),{9:[1,270]},o($VN,[2,36]),o($Vw1,[2,39]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:271,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{26:$VS,42:272,44:120,45:$VT,46:$VU,47:$VV},o([26,45,46,47,74,75],$Vf1,{79:$Vg1,98:$Vh1}),{79:$Vj1},o($Vy1,[2,70]),o($Vy1,[2,72]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:221,73:77,81:273,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$Vn1,107:$Vo1,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:274,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:275,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Ve1,[2,143]),o($Ve1,[2,144]),o($Ve1,[2,145]),o($Ve1,[2,146]),o($Ve1,[2,147]),o($Ve1,[2,148]),o($Vk1,[2,99]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:221,73:77,81:276,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$Vn1,107:$Vo1,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:277,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{15:82,17:$Vo,23:$Vp,31:86,63:78,70:278,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},{19:[1,279]},{19:[1,280]},{19:[1,281]},o($Vv1,[2,74],{120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1}),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:282,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Vk1,[2,121]),o($VQ,[2,50]),o($VN,[2,53]),o($VE1,[2,56],{60:283}),o($VN,[2,62]),{9:[1,284],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},o($VN,[2,69]),{19:[1,285]},{19:[1,286],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},o([9,19,20,64,89],[2,151],{120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1}),{89:[1,287]},{19:[1,288],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{20:[1,289],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},o($Vk1,[2,117]),o($Vk1,[2,118]),o($Vk1,[2,119]),{19:[1,290],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{28:[1,291],61:292,62:[1,293],66:[1,294]},{15:244,23:$Ve,31:86,38:296,39:297,71:295,73:298,77:$Vl,78:$Vm,90:$Vq,91:$Vr,92:$Vs,98:$Vu,100:$Vx1,101:85,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD},{9:[2,76]},{9:[2,77]},o($Vk1,[2,100]),o($Vk1,[2,115]),{15:82,17:$Vo,23:$Vp,31:86,63:78,70:299,73:77,90:$Vq,91:$Vr,92:$Vs,96:79,97:$Vt,98:$Vu,100:$Vv,101:85,102:$Vw,103:$Vx,104:$Vy,105:$Vz,113:93,115:94,116:$VA,117:$VB,118:$VC,119:$VD,122:$VE,130:$VF,134:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL},o($Vk1,[2,120]),o($VN,[2,54]),o($VE1,[2,55]),{63:300,100:[1,301],102:$Vw,103:$Vx,104:$Vy,105:$Vz},{64:[1,302]},{19:[1,303]},{19:[2,65]},{19:[2,66]},{74:[1,304],75:[1,305]},{19:[1,306],120:$V_,121:$V$,123:$V01,124:$V11,125:$V21,126:$V31,127:$V41,128:$V51,129:$V61,130:$V71,131:$V81,132:$V91,133:$Va1,140:$Vb1,141:$Vc1,142:$Vd1},{64:[1,307]},{64:$Vi1},{15:62,22:59,23:$Ve,29:308,30:106,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{26:$VS,42:309,44:120,45:$VT,46:$VU,47:$VV},{19:[2,67]},{19:[2,68]},o($Vk1,[2,116]),{15:62,22:59,23:$Ve,29:310,30:106,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,49:53,52:$Vg,58:$Vh,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{9:$VF1,15:62,22:59,23:$Ve,30:172,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,46:$VG1,49:53,52:$Vg,58:$Vh,65:311,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},o($VN,[2,63]),{9:$VF1,15:62,22:59,23:$Ve,30:172,31:41,32:42,33:43,34:44,35:45,36:46,37:47,38:48,39:49,40:50,41:51,46:$VG1,49:53,52:$Vg,58:$Vh,65:313,67:$Vi,68:$Vj,69:$Vk,72:58,77:$Vl,78:$Vm,83:$Vn,86:10,87:11,90:$V1,91:$V2,92:$V3,93:$V4,94:$V5,95:$V6},{9:[1,314]},{9:[1,315]},{9:[1,316]},o($VE1,[2,58]),{9:[2,59]},o($VE1,[2,57])],
defaultActions: {3:[2,1],24:[2,8],25:[2,9],95:[2,122],96:[2,123],97:[2,124],98:[2,125],99:[2,126],100:[2,127],101:[2,128],170:[2,17],285:[2,76],286:[2,77],296:[2,65],297:[2,66],301:[2,110],304:[2,67],305:[2,68],315:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var listaErroresParser = [];

    function addError(type, lexem, first_line, first_column) {
        var auxError = 'Error '+type+' Token: '+ lexem + ' Linea: '+first_line + ' Columna: ' +first_column +'\n';
        listaErroresParser.push(auxError); 
    }
    function addError(auxError) {
        listaErroresParser.push(auxError + '\n'); 
    }
    function getErrorList(){
        return listaErroresParser;
    }
    //exports.listaErroresParser = getErrorList();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/;
break;
case 1:/*ignore*/;
break;
case 2:/*ignore*/;
break;
case 3: return 17;              
break;
case 4: return 19;                 
break;
case 5: return 26;              
break;
case 6: return 28;                 
break;
case 7: return 88;              
break;
case 8: return 89;                 
break;
case 9: return 9;                
break;
case 10: return 64;                
break;
case 11: return 20;                      
break;
case 12: return 79;                     
break;
case 13: return 142 
break;
case 14: return 97;                      
break;
case 15: return 'NULL';    
break;
case 16: return 90;     
break;
case 17: return 91;  
break;
case 18: return 95;   
break;
case 19: return 92; 
break;
case 20: return 93;    
break;
case 21: return 94;  
break;
case 22: return 25; 
break;
case 23: return 74;   
break;
case 24: return 75;   
break;
case 25: return 129;    
break;
case 26: return 130;    
break;
case 27: return 131;    
break;
case 28: return 132;    
break;
case 29: return 133;          
break;
case 30: return 134;          
break;
case 31: return 135;         
break;
case 32: return 136;        
break;
case 33: return 137;          
break;
case 34: return 138;          
break;
case 35: return 139;          
break;
case 36: return 128;     
break;
case 37: return 127; 
break;
case 38: return 125;     
break;
case 39: return 126;     
break;
case 40: return 123;           
break;
case 41: return 124;           
break;
case 42: return 120;        
break;
case 43: return 121;         
break;
case 44: return 122;        
break;
case 45: return 140; 
break;
case 46: return 141; 
break;
case 47: return 108; 
break;
case 48: return 109;          
break;
case 49: return 110;             
break;
case 50: return 111;        
break;
case 51: return 112;        
break;
case 52: return 77;    
break;
case 53: return 78;  
break;
case 54: return 85;    
break;
case 55: return 114;        
break;
case 56: return 116;        
break;
case 57: return 117;     
break;
case 58: return 118; 
break;
case 59: return 119;       
break;
case 60: return 83; 
break;
case 61: return 24;  
break;
case 62: return 16; 
break;
case 63: return 52;    
break;
case 64: return 55; 
break;
case 65: return 57;  
break;
case 66: return 58;   
break;
case 67: return 62;     
break;
case 68: return 46;    
break;
case 69: return 66;  
break;
case 70: return 67;  
break;
case 71: return 68;     
break;
case 72: return 69;    
break;
case 73: return 76;     
break;
case 74: return 47;  
break;
case 75: return 106; 
break;
case 76: return 107;   
break;
case 77: return 82; 
break;
case 78: return 80;  
break;
case 79: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 100; 
            
break;
case 80: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 105;
            
break;
case 81: return 103; 
break;
case 82: return 102;  
break;
case 83: return 104; 
break;
case 84: return 23; 
break;
case 85:return 5;
break;
case 86:addError("Lexico", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1)      
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*))/,/^(?:([\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/]))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:=)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:true|false\b)/,/^(?:[aA-zZ|"_"]([aA-zZ]|[0-9]|_)*)/,/^(?:$)/,/^(?:[^\s]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}