/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,24,25,89,90,91,92,93],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,24],$V7=[1,28],$V8=[16,23],$V9=[16,23,87],$Va=[8,20],$Vb=[1,32],$Vc=[2,114],$Vd=[1,44],$Ve=[1,55],$Vf=[1,58],$Vg=[1,59],$Vh=[1,60],$Vi=[1,54],$Vj=[1,46],$Vk=[1,47],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,39],$Vu=[1,43],$Vv=[1,79],$Vw=[1,66],$Vx=[1,91],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,87],$VD=[1,88],$VE=[1,90],$VF=[2,20],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[1,109],$VS=[1,110],$VT=[1,111],$VU=[1,112],$VV=[1,113],$VW=[1,114],$VX=[1,115],$VY=[1,116],$VZ=[1,117],$V_=[1,118],$V$=[1,119],$V01=[8,19,20,62,88,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],$V11=[2,98],$V21=[1,124],$V31=[1,123],$V41=[2,110],$V51=[1,128],$V61=[8,19,20,26,44,45,46,62,72,73,88,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],$V71=[1,130],$V81=[5,8,23,24,25,28,45,51,54,55,56,65,66,67,75,76,81,89,90,91,92,93],$V91=[1,145],$Va1=[1,147],$Vb1=[1,149],$Vc1=[1,150],$Vd1=[1,151],$Ve1=[23,26,51,56,65,66,67,75,76,81,89,90,91,92,93],$Vf1=[19,20,28],$Vg1=[8,19,20,62,88,118,119,140],$Vh1=[8,19,20,62,88,118,119,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,140],$Vi1=[1,189],$Vj1=[1,190],$Vk1=[1,192],$Vl1=[1,193],$Vm1=[1,194],$Vn1=[1,195],$Vo1=[1,196],$Vp1=[1,198],$Vq1=[19,20,88],$Vr1=[8,23,28,45,51,56,65,66,67,75,76,81,89,90,91,92,93],$Vs1=[5,8,23,24,25,28,44,45,46,51,54,55,56,65,66,67,75,76,81,89,90,91,92,93],$Vt1=[8,19,20,62,88,118,119,121,122,123,124,125,126,140],$Vu1=[8,19,20,62,88,118,119,121,122,123,124,125,126,127,128,140],$Vv1=[8,19,20,62,88,118,119,121,122,123,124,125,126,127,128,129,130,131,140],$Vw1=[8,19,20,62,88],$Vx1=[19,62,88],$Vy1=[28,44,45,46],$Vz1=[1,253],$VA1=[8,19],$VB1=[2,12],$VC1=[28,60,64],$VD1=[2,61],$VE1=[1,303];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones_globales_block":4,"EOF":5,"instrucciones_globales_unit":6,"instrucciones_variables_declaracion":7,"PUNTO_COMA":8,"instrucciones_funciones_declaracion":9,"declarar_struct":10,"instrucciones_funciones_declaracion_tipo_funciones":11,"instrucciones_funciones_declaracion_nombre_funciones":12,"instrucciones_funciones_declaracion_parametros":13,"instrucciones_block":14,"nombres_variables_unidad":15,"MAIN":16,"PAREN_INICIO":17,"instrucciones_funciones_declaracion_parametros_bloque":18,"PAREN_FIN":19,"COMA":20,"instrucciones_funciones_declaracion_parametros_unidad":21,"tipo_datos_generales":22,"IDENTIFICADOR":23,"VOID":24,"STRUCT":25,"LLAVE_INICIO":26,"declarar_struct_variables":27,"LLAVE_FIN":28,"instrucciones_unidad_varios":29,"instrucciones_unidad":30,"instrucciones_funciones_llamada":31,"instrucciones_sentencia_control_ifs":32,"instrucciones_sentencia_control_switch":33,"instrucciones_loops_while":34,"instrucciones_loops_do_while":35,"instrucciones_loops_for":36,"instrucciones_variables_asignacion":37,"instrucciones_print":38,"instrucciones_arreglos_push_pop":39,"instrucciones_return":40,"instrucciones_block_loops":41,"instrucciones_unidad_varios_loops":42,"instrucciones_unidad_loops":43,"instrucciones_funidad":44,"BREAK":45,"CONTINUE":46,"instrucciones_print_valores":47,"instrucciones_sentencia_control_ifs_if":48,"instrucciones_sentencia_control_ifs_else_if_block":49,"instrucciones_sentencia_control_ifs_else":50,"IF":51,"condicion":52,"instrucciones_sentencia_control_ifs_else_if":53,"ELSE_IF":54,"ELSE":55,"SWITCH":56,"instrucciones_sentencia_control_switch_cuerpo":57,"instrucciones_sentencia_control_switch_cuerpo_case_varios":58,"instrucciones_sentencia_control_switch_cuerpo_case":59,"CASE":60,"valores_datos_primarios":61,"DOS_PUNTOS":62,"instrucciones_sentencia_control_switch_cuerpo_case_break":63,"DEFAULT":64,"WHILE":65,"DO":66,"FOR":67,"operacion_general":68,"instrucciones_for":69,"instrucciones_loops_for_each":70,"valores_datos":71,"INCREMENTO":72,"DECREMENTO":73,"IN":74,"print":75,"println":76,"PUNTO":77,"POP":78,"arreglos_valores_posiciones":79,"PUSH":80,"RETURN":81,"instrucciones_variables_declaracion_conjunto":82,"instrucciones_variables_declaracion_simple":83,"IGUAL":84,"tipo_datos_arreglo":85,"tipo_datos_primarios":86,"CORCH_INICIO":87,"CORCH_FIN":88,"INT":89,"DOUBLE":90,"BOOLEAN":91,"CHAR":92,"STRING":93,"valores_datos_arreglos":94,"GATO":95,"CORCH_INI":96,"funciones_con_valor_string":97,"STRING_VALUE":98,"funciones_con_valor_parsing":99,"ENTERO_VALUE":100,"DECIMAL_VALUE":101,"BOOLEAN_VALUE":102,"CHAR_VALUE":103,"BEGIN":104,"END":105,"CARACTEROFPOSITION":106,"SUBSTRING":107,"LENGTH":108,"TOUPPERCASE":109,"TOLOWERCASE":110,"funciones_con_valor_parsing_tipo_datos":111,"PARSE":112,"funciones_con_valor_parsing_tipo_parseo":113,"TOINT":114,"TODOUBLE":115,"STRING_PARSE":116,"TYPEOF":117,"AND":118,"OR":119,"NOT":120,"MAYOR":121,"MENOR":122,"MAYOR_IGUAL":123,"MENOR_IGUAL":124,"DIFERENTE_IGUAL":125,"IGUAL_IGUAL":126,"SIGNO_MAS":127,"SIGNO_MIN":128,"SIGNO_POR":129,"SIGNO_DIV":130,"MOD":131,"POW":132,"SQRT":133,"LOG10":134,"SIN":135,"COS":136,"TAN":137,"CONCAT_AND":138,"CONCAT_POW":139,"SIGNO_INTERROGACION_CIERRE":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_COMA",16:"MAIN",17:"PAREN_INICIO",19:"PAREN_FIN",20:"COMA",23:"IDENTIFICADOR",24:"VOID",25:"STRUCT",26:"LLAVE_INICIO",28:"LLAVE_FIN",44:"instrucciones_funidad",45:"BREAK",46:"CONTINUE",51:"IF",54:"ELSE_IF",55:"ELSE",56:"SWITCH",60:"CASE",62:"DOS_PUNTOS",64:"DEFAULT",65:"WHILE",66:"DO",67:"FOR",72:"INCREMENTO",73:"DECREMENTO",74:"IN",75:"print",76:"println",77:"PUNTO",78:"POP",80:"PUSH",81:"RETURN",84:"IGUAL",87:"CORCH_INICIO",88:"CORCH_FIN",89:"INT",90:"DOUBLE",91:"BOOLEAN",92:"CHAR",93:"STRING",95:"GATO",96:"CORCH_INI",98:"STRING_VALUE",100:"ENTERO_VALUE",101:"DECIMAL_VALUE",102:"BOOLEAN_VALUE",103:"CHAR_VALUE",104:"BEGIN",105:"END",106:"CARACTEROFPOSITION",107:"SUBSTRING",108:"LENGTH",109:"TOUPPERCASE",110:"TOLOWERCASE",112:"PARSE",114:"TOINT",115:"TODOUBLE",116:"STRING_PARSE",117:"TYPEOF",118:"AND",119:"OR",120:"NOT",121:"MAYOR",122:"MENOR",123:"MAYOR_IGUAL",124:"MENOR_IGUAL",125:"DIFERENTE_IGUAL",126:"IGUAL_IGUAL",127:"SIGNO_MAS",128:"SIGNO_MIN",129:"SIGNO_POR",130:"SIGNO_DIV",131:"MOD",132:"POW",133:"SQRT",134:"LOG10",135:"SIN",136:"COS",137:"TAN",138:"CONCAT_AND",139:"CONCAT_POW",140:"SIGNO_INTERROGACION_CIERRE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[6,2],[9,4],[12,1],[12,1],[13,3],[13,2],[18,3],[18,1],[21,2],[11,1],[11,1],[10,5],[27,3],[27,1],[27,0],[14,3],[14,2],[14,1],[29,2],[29,1],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,2],[30,2],[30,2],[30,2],[30,2],[41,3],[41,2],[41,1],[42,2],[42,1],[43,1],[43,2],[43,2],[31,4],[31,3],[32,3],[48,3],[49,2],[49,0],[53,3],[50,2],[50,0],[33,5],[57,3],[58,2],[58,0],[59,6],[59,5],[63,2],[63,0],[34,3],[35,5],[36,9],[36,1],[69,1],[69,1],[69,2],[69,2],[70,5],[38,4],[38,3],[38,4],[38,3],[47,3],[47,1],[39,6],[39,6],[40,2],[40,1],[52,3],[7,2],[82,3],[82,1],[83,1],[83,1],[37,3],[22,1],[22,1],[85,3],[86,1],[86,1],[86,1],[86,1],[86,1],[94,2],[94,2],[71,1],[71,4],[71,6],[71,3],[71,3],[71,3],[71,1],[71,1],[61,1],[61,1],[61,1],[61,1],[61,1],[79,1],[79,1],[79,1],[15,1],[97,4],[97,6],[97,3],[97,3],[97,3],[99,6],[99,4],[111,1],[111,1],[111,1],[113,1],[113,1],[113,1],[113,1],[68,3],[68,3],[68,2],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,5],[68,1],[68,1],[68,1],[68,2],[68,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
/*return reversaArreglo($$[$0-1]);*/
break;
}
},
table: [o($V0,[2,3],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,9:6,10:7,11:9,22:8,24:[1,13],25:[1,10],85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{1:[2,1]},o($V0,[2,2]),{8:[1,19]},o($V0,[2,5]),{8:[1,20]},{16:[2,16],23:$V6,37:23,82:21,83:22},{12:25,15:26,16:[1,27],23:$V7},{23:[1,29]},o($V8,[2,88]),o($V8,[2,89],{87:[1,30]}),o($V8,[2,15]),o($V9,[2,91]),o($V9,[2,92]),o($V9,[2,93]),o($V9,[2,94]),o($V9,[2,95]),o($V0,[2,4]),o($V0,[2,6]),{8:[2,82],20:[1,31]},o($Va,[2,84]),o($Va,[2,85]),o($Va,[2,86],{84:$Vb}),{13:33,17:[1,34]},{17:[2,8]},{17:[2,9]},o([8,17,19,20,62,74,88,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],$Vc),{26:[1,35]},{88:[1,36]},{23:$V6,37:23,83:37},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:38,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{7:74,14:65,15:89,22:86,23:$Vv,26:$Vw,30:67,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{18:92,19:[1,93],21:94,22:95,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{18:97,21:94,22:95,27:96,28:$VF,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($V8,[2,90]),o($Va,[2,83]),o([8,19,20],[2,87],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:120,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V01,[2,152]),o($V01,[2,153]),o($V01,[2,154]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:121,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:122,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V01,$V11,{77:$V21,95:[1,125],96:$V31}),{15:45,17:$Vd,23:$Ve,31:49,47:126,61:41,68:127,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V01,$V41,{77:$V51}),o($V61,[2,104]),o($V61,[2,105]),o($V01,[2,106]),o($V01,[2,107]),o($V01,[2,108]),o($V01,[2,109]),{15:129,23:$V7},o([8,19,20,26,44,45,46,62,77,88,95,96,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],$Vc,{17:$V71}),{77:[1,131]},{17:[1,132]},{77:[2,122]},{77:[2,123]},{77:[2,124]},{17:[2,125]},{17:[2,126]},{17:[2,127]},{17:[2,128]},o($V0,[2,7]),{7:74,15:89,22:86,23:$Vv,28:[1,134],29:133,30:135,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($V81,[2,23]),{8:[1,136]},o($V81,[2,27]),o($V81,[2,28]),o($V81,[2,29]),o($V81,[2,30]),o($V81,[2,31]),{8:[1,137]},{8:[1,138]},{8:[1,139]},{8:[1,140]},{8:[1,141]},o([72,73,77,96],$Vc,{17:$V71,84:$Vb}),o($V81,[2,50],{49:142}),{17:[1,143]},{17:$V91,52:144},{26:$Va1,41:146,43:148,44:$Vb1,45:$Vc1,46:$Vd1},{15:153,17:[1,152],23:$V7},o($V81,[2,65]),{23:$V6,37:23,82:21,83:22},{17:[1,154]},{17:[1,155]},{77:[1,156]},{8:[2,80],15:45,17:$Vd,23:$Ve,31:49,61:41,68:157,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{17:$V91,52:158},{19:[1,159],20:[1,160]},o($Ve1,[2,11]),o($Vf1,[2,13]),{23:[1,161]},{28:[1,162]},{20:[1,163],28:[2,19]},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:164,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:165,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:166,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:167,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:168,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:169,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:170,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:171,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:172,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:173,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:174,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:175,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:176,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:177,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:178,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:179,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:180,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:181,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:182,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:183,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:184,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:185,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($Vg1,[2,131],{121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vh1,[2,155],{133:$VU,138:$VZ,139:$V_}),{19:[1,186],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:188,71:40,79:187,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vi1,105:$Vj1,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{97:191,106:$Vk1,107:$Vl1,108:$Vm1,109:$Vn1,110:$Vo1},o($V01,[2,97]),{20:$Vp1,88:[1,197]},o($Vq1,[2,76],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),{97:199,106:$Vk1,107:$Vl1,108:$Vm1,109:$Vn1,110:$Vo1},o($V01,[2,96]),{15:45,17:$Vd,19:[1,201],23:$Ve,31:49,47:200,61:41,68:127,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{112:[1,202]},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:203,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{7:74,15:89,22:86,23:$Vv,28:[1,204],30:205,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($V81,[2,22]),o($Vr1,[2,25]),o($V81,[2,26]),o($V81,[2,32]),o($V81,[2,33]),o($V81,[2,34]),o($V81,[2,35]),o($V81,[2,36]),o([5,8,23,24,25,28,45,51,56,65,66,67,75,76,81,89,90,91,92,93],[2,53],{50:206,53:207,54:[1,209],55:[1,208]}),{23:[1,210]},{26:$Va1,41:211,43:148,44:$Vb1,45:$Vc1,46:$Vd1},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:212,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{65:[1,213]},{28:[1,215],42:214,43:216,44:$Vb1,45:$Vc1,46:$Vd1},o($V81,[2,39]),o($Vs1,[2,42]),{8:[1,217]},{8:[1,218]},{7:219,22:86,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{74:[1,220]},{15:45,17:$Vd,19:[1,222],23:$Ve,31:49,47:221,61:41,68:127,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,19:[1,224],23:$Ve,31:49,47:223,61:41,68:127,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{78:[1,225],80:[1,226]},{8:[2,79],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},{7:74,14:227,15:89,22:86,23:$Vv,26:$Vw,30:67,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($Ve1,[2,10]),{21:228,22:95,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($Vf1,[2,14]),{8:[2,17]},{18:97,21:230,22:95,27:229,28:$VF,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($Vg1,[2,129],{121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o([8,19,20,62,88,119,140],[2,130],{118:$VG,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,132],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,133],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,134],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,135],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,136],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vt1,[2,137],{127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vu1,[2,138],{129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vu1,[2,139],{129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vv1,[2,140],{132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vv1,[2,141],{132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vv1,[2,142],{132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),o($Vh1,[2,143],{133:$VU,138:$VZ,139:$V_}),o($Vw1,[2,144],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),o($Vh1,[2,145],{133:$VU,138:$VZ,139:$V_}),o($Vh1,[2,146],{133:$VU,138:$VZ,139:$V_}),o($Vh1,[2,147],{133:$VU,138:$VZ,139:$V_}),o($Vh1,[2,148],{133:$VU,138:$VZ,139:$V_}),o($Vw1,[2,149],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),o($Vw1,[2,150],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),{62:[1,231],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V01,[2,156]),{62:[1,233],88:[1,232]},o($Vx1,[2,111],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),o($Vx1,[2,112]),o($Vx1,[2,113]),o($V61,[2,102]),{17:[1,234]},{17:[1,235]},{17:[1,236]},{17:[1,237]},{17:[1,238]},o($V61,[2,101]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:239,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V61,[2,103]),{19:[1,240],20:$Vp1},o($V61,[2,46]),{17:[1,241]},{19:[1,242],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V81,[2,21]),o($Vr1,[2,24]),o($V81,[2,47]),o($V81,[2,49]),{7:74,14:243,15:89,22:86,23:$Vv,26:$Vw,30:67,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{17:$V91,52:244},{19:[1,245]},o($V81,[2,62]),{19:[1,246],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},{17:$V91,52:247},{28:[1,248],43:249,44:$Vb1,45:$Vc1,46:$Vd1},o($V81,[2,38]),o($Vy1,[2,41]),o($Vs1,[2,43]),o($Vs1,[2,44]),{8:[1,250]},{15:252,23:$Ve,31:49,71:251,89:$Vf,90:$Vg,91:$Vh,96:$Vj,98:$Vz1,99:48,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs},{19:[1,254],20:$Vp1},o($VA1,[2,72]),{19:[1,255],20:$Vp1},o($VA1,[2,74]),{17:[1,256]},{17:[1,257]},o($V81,[2,48]),o([19,20],$VB1),{28:[2,18]},o([20,28],$VB1),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:258,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V61,[2,99]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:188,71:40,79:259,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vi1,105:$Vj1,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:260,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:261,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{19:[1,262]},{19:[1,263]},{19:[1,264]},o($Vq1,[2,75],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$}),o($V61,[2,45]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:265,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V61,[2,121]),o($V81,[2,52]),{7:74,14:266,15:89,22:86,23:$Vv,26:$Vw,30:67,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{26:[1,268],57:267},o([8,23,26,44,45,46,51,56,65,66,67,75,76,81,89,90,91,92,93],[2,81]),{8:[1,269]},o($V81,[2,37]),o($Vy1,[2,40]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:270,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{26:$Va1,41:271,43:148,44:$Vb1,45:$Vc1,46:$Vd1},o([26,44,45,46,72,73],$V11,{77:$V21,96:$V31}),{77:$V51},o($VA1,[2,71]),o($VA1,[2,73]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:188,71:40,79:272,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vi1,105:$Vj1,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},{15:45,17:$Vd,23:$Ve,31:49,61:41,68:273,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o([8,19,20,62,88,140],[2,151],{118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_}),{88:[1,274]},{19:[1,275],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},{20:[1,276],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V61,[2,117]),o($V61,[2,118]),o($V61,[2,119]),{19:[1,277],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V81,[2,51]),o($V81,[2,54]),o($VC1,[2,57],{58:278}),o($V81,[2,63]),{8:[1,279],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V81,[2,70]),{19:[1,280]},{19:[1,281],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V61,[2,100]),o($V61,[2,115]),{15:45,17:$Vd,23:$Ve,31:49,61:41,68:282,71:40,89:$Vf,90:$Vg,91:$Vh,94:42,95:$Vi,96:$Vj,98:$Vk,99:48,100:$Vl,101:$Vm,102:$Vn,103:$Vo,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs,120:$Vt,128:$Vu},o($V61,[2,120]),{28:[1,283],59:284,60:[1,285],64:[1,286]},{15:252,23:$Vv,31:49,37:288,38:289,69:287,71:290,75:$VC,76:$VD,89:$Vf,90:$Vg,91:$Vh,96:$Vj,98:$Vz1,99:48,111:56,113:57,114:$Vp,115:$Vq,116:$Vr,117:$Vs},{8:[2,77]},{8:[2,78]},{19:[1,291],118:$VG,119:$VH,121:$VI,122:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP,129:$VQ,130:$VR,131:$VS,132:$VT,133:$VU,134:$VV,135:$VW,136:$VX,137:$VY,138:$VZ,139:$V_,140:$V$},o($V81,[2,55]),o($VC1,[2,56]),{61:292,98:[1,293],100:$Vl,101:$Vm,102:$Vn,103:$Vo},{62:[1,294]},{19:[1,295]},{19:[2,66]},{19:[2,67]},{72:[1,296],73:[1,297]},o($V61,[2,116]),{62:[1,298]},{62:$V41},{7:74,15:89,22:86,23:$Vv,29:299,30:135,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{26:$Va1,41:300,43:148,44:$Vb1,45:$Vc1,46:$Vd1},{19:[2,68]},{19:[2,69]},{7:74,15:89,22:86,23:$Vv,29:301,30:135,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,48:80,51:$Vx,56:$Vy,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{7:74,8:$VD1,15:89,22:86,23:$Vv,30:205,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,45:$VE1,48:80,51:$Vx,56:$Vy,63:302,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},o($V81,[2,64]),{7:74,8:$VD1,15:89,22:86,23:$Vv,30:205,31:68,32:69,33:70,34:71,35:72,36:73,37:75,38:76,39:77,40:78,45:$VE1,48:80,51:$Vx,56:$Vy,63:304,65:$Vz,66:$VA,67:$VB,70:85,75:$VC,76:$VD,81:$VE,85:11,86:12,89:$V1,90:$V2,91:$V3,92:$V4,93:$V5},{8:[1,305]},{8:[1,306]},{8:[1,307]},o($VC1,[2,59]),{8:[2,60]},o($VC1,[2,58])],
defaultActions: {3:[2,1],26:[2,8],27:[2,9],58:[2,122],59:[2,123],60:[2,124],61:[2,125],62:[2,126],63:[2,127],64:[2,128],162:[2,17],229:[2,18],280:[2,77],281:[2,78],288:[2,66],289:[2,67],293:[2,110],296:[2,68],297:[2,69],306:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var listaErroresParser = [];

    function addError(type, lexem, first_line, first_column) {
        var auxError = 'Error '+type+' Token: '+ lexem + ' Linea: '+first_line + ' Columna: ' +first_column +'\n';
        listaErroresParser.push(auxError); 
    }
    function addError(auxError) {
        listaErroresParser.push(auxError + '\n'); 
    }
    function getErrorList(){
        return listaErroresParser;
    }
    //exports.listaErroresParser = getErrorList();

    function linea(linea){
        return linea;
    }
    function columna(column){
        return column;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/;
break;
case 1:/*ignore*/;
break;
case 2:/*ignore*/;
break;
case 3: return 17;              
break;
case 4: return 19;                 
break;
case 5: return 26;              
break;
case 6: return 28;                 
break;
case 7: return 87;              
break;
case 8: return 88;                 
break;
case 9: return 8;                
break;
case 10: return 62;                
break;
case 11: return 20;                      
break;
case 12: return 77;                     
break;
case 13: return 140 
break;
case 14: return 95;                      
break;
case 15: return 'NULL';    
break;
case 16: return 89;     
break;
case 17: return 90;  
break;
case 18: return 'FLOAT';   
break;
case 19: return 91; 
break;
case 20: return 92;    
break;
case 21: return 93;  
break;
case 22: return 25; 
break;
case 23: return 72;   
break;
case 24: return 73;   
break;
case 25: return 127;    
break;
case 26: return 128;    
break;
case 27: return 129;    
break;
case 28: return 130;    
break;
case 29: return 131;          
break;
case 30: return 132;          
break;
case 31: return 133;         
break;
case 32: return 134;        
break;
case 33: return 135;          
break;
case 34: return 136;          
break;
case 35: return 137;          
break;
case 36: return 126;     
break;
case 37: return 125; 
break;
case 38: return 123;     
break;
case 39: return 124;     
break;
case 40: return 121;           
break;
case 41: return 122;           
break;
case 42: return 118;        
break;
case 43: return 119;         
break;
case 44: return 120;        
break;
case 45: return 138; 
break;
case 46: return 139; 
break;
case 47: return 106; 
break;
case 48: return 107;          
break;
case 49: return 108;             
break;
case 50: return 109;        
break;
case 51: return 110;        
break;
case 52: return 'PRINT';    
break;
case 53: return 'PRINTLN';  
break;
case 54: return 84;    
break;
case 55: return 112;        
break;
case 56: return 114;        
break;
case 57: return 115;     
break;
case 58: return 116; 
break;
case 59: return 117;       
break;
case 60: return 81; 
break;
case 61: return 24;  
break;
case 62: return 16; 
break;
case 63: return 51;    
break;
case 64: return 54; 
break;
case 65: return 55;  
break;
case 66: return 56;   
break;
case 67: return 60;     
break;
case 68: return 45;    
break;
case 69: return 64;  
break;
case 70: return 65;  
break;
case 71: return 66;     
break;
case 72: return 67;    
break;
case 73: return 74;     
break;
case 74: return 46;  
break;
case 75: return 104; 
break;
case 76: return 105;   
break;
case 77: return 80; 
break;
case 78: return 78;  
break;
case 79: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 98; 
            
break;
case 80: 
                yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                return 103;
            
break;
case 81: return 101; 
break;
case 82: return 100;  
break;
case 83: return 102; 
break;
case 84: return 23; 
break;
case 85:return 5;
break;
case 86:addError("Lexico", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + 1)      
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\?)/,/^(?:#)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:=)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:true|false\b)/,/^(?:[aA-zZ|"_"]([aA-zZ]|[0-9]|_)*)/,/^(?:$)/,/^(?:[^\s]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}